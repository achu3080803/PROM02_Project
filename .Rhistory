# Add a new column
G$nodes$group <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes[G$nodes$group=="Person",]$label = G$nodes[G$nodes$group=="Person",]$name
G$nodes$title <- G$nodes$group
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
head(m$relationships)
###############################################################################################
# Function getRecentlyRatedMovies
#
# Description:  Return a neo list that contains the graph data of recently rated movies by the given user.
#               Using "memoise" to automatically cache the results
# Input:        userID - User ID
#               recLimit - number of records to be returned
# Output:       Return a neo list that contains the graph data of recently rated movies by the given user.
###############################################################################################
getRecentlyRatedMovies <- memoise(function(loginID, recLimit) {
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
head(G$nodes)
length(G$nodes)
# Add a new column
G$nodes$group <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes[G$nodes$group=="Person",]$label = G$nodes[G$nodes$group=="Person",]$name
G$nodes$title <- G$nodes$group
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, reviewed_date = reviewed_date)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
###############################################################################################
# Function getRecentlyRatedMovies
#
# Description:  Return a neo list that contains the graph data of recently rated movies by the given user.
#               Using "memoise" to automatically cache the results
# Input:        userID - User ID
#               recLimit - number of records to be returned
# Output:       Return a neo list that contains the graph data of recently rated movies by the given user.
###############################################################################################
getRecentlyRatedMovies <- memoise(function(loginID, recLimit) {
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
head(G$nodes)
length(G$nodes)
# Add a new column
G$nodes$group <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes[G$nodes$group=="Person",]$label = G$nodes[G$nodes$group=="Person",]$name
G$nodes$title <- G$nodes$group
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
head(m$relationships)
m<-getRecentlyRatedMovies(1,10)
head(m$nodes)
m$nodes[0,]$label
m$nodes[2,]$poster
m$nodes[1,]$label
m$nodes[1,]$title
m1<-m$nodes[-1,]
head(m1)
m1<-m$nodes[-m$nodes[]$title=="Person",]
-m$nodes[]$title=="Person"
m$nodes[]$title
m1<-m$nodes[-(m$nodes[]$title=="Person"),]
head(m1)
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
head(G)
ead(m$nodes)
head(m$nodes)
runApp()
runApp()
runApp()
m<-getRecentlyRatedMovies(1,10)
head(m$nodes)
m1<-m$nodes[-(m$nodes[]$node_type=="Person"),]
head(m1)
head(m$nodes)
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
head(G$nodes)
length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
head(G)
getRecentlyRatedMovies <- memoise(function(loginID, recLimit) {
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
head(m1)
m1<-m$nodes[-(m$nodes[]$node_type=="Person"),]
head(m1)
runApp()
runApp()
clear
cls
runApp()
runApp()
m<-getRecentlyRatedMovies(1,10)
head(m$nodes)
m1<-m$nodes[-(m$nodes[]$node_type=="Person"),]
head(m1)
runApp()
View(m_graph)
View(m_movies)
runApp()
runApp()
m<-getRecentlyRatedMovies(1,10)
m<-getRecentlyRatedMovies(1,10)
###############################################################################################
# Function getRecentlyRatedMovies
#
# Description:  Return a neo list that contains the graph data of recently rated movies by the given user.
#               Using "memoise" to automatically cache the results
# Input:        userID - User ID
#               recLimit - number of records to be returned
# Output:       Return a neo list that contains the graph data of recently rated movies by the given user.
###############################################################################################
getRecentlyRatedMovies <- memoise(function(loginID, recLimit) {
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
head(m$nodes)
m1<-m$nodes[-(m$nodes[]$node_type=="Person"),]
head(m1)
class(m1)
length(m1)
print(m1)
# Function getTermMatrix
#
# Description:  Return a matrix that contains genres of the movies that satisfies the input criteria.
#               Using "memoise" to automatically cache the results
# Input:        from_year - Starting movie production year
#               to_year   - Ending movie production year
#               min_rating - Minimum average ratings that the movie should have
#               max_rating - Maximum average ratings that the movie should have
# Output:       Return a matrix that contains genres of the movies that satisfies the input criteria.
###############################################################################################
getTermMatrix <- memoise(function(from_year, to_year, min_rating, max_rating) {
print("global.R")
print(from_year)
print(to_year)
print(min_rating)
print(max_rating)
genres_df1 <- genres_df %>%
filter(between(genres_df$year, from_year, to_year), between(genres_df$avgRating, min_rating, max_rating))
print("# of genre_df1")
print(nrow(genres_df1))
# print(min(genres_df$year))
# print(max(genres_df$year))
if (nrow(genres_df1) == 0 ){
text <- c("NOTHING")
}
else {
text <- as.vector(genres_df1$genres)
}
myCorpus = Corpus(VectorSource(text))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
runApp()
runApp()
runApp()
runApp()
runApp()
s[-(m$nodes[]$node_type=="Person"),]
#
m<-getRecentlyRatedMovies(1,10)
getRecentlyRatedMovies <- memoise(function(loginID, recLimit) {
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
return (G)
})
m<-getRecentlyRatedMovies(1,10)
m1<-m$nodes[-(m$nodes[]$node_type=="Person"),]
m1$poster
runApp()
runApp()
runApp()
head(m$relationships)
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
$relationships
G$relationships
G$nodes
print("global.R")
print(loginID)
print(recLimit)
# loginID <- 1
# recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
# Add rating column to nodes
for (i in 1:nrow(G$relationships)){
G$nodes[(G$nodes$id==G$relationships$to),]$user_rating <- G$relationships[i,]$rating
}
warnings()
G$nodes
head(G$nodes)
# Add rating column to nodes
for (i in 1:nrow(G$relationships)){
G$nodes[(G$nodes$id==G$relationships$to),]$user_rating <- G$relationships[i,]$rating
}
head(G$nodes)
nrow(G$relationships)
nrow(G$nodes)
for (i in 1:nrow(G$relationships)){
G$nodes[(G$nodes$id==G$relationships[i,]$to),]$user_rating <- G$relationships[i,]$rating
}
nrow(G$nodes)
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
G$nodes[j,]$user_rating <- G$relationships[i,]$rating
}
}
}
last_error()
nrow(G$relationships)
nrow(G$nodes)
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
#G$nodes[j,]$user_rating <- G$relationships[i,]$rating
print("hello")
}
}
}
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
#G$nodes[j,]$user_rating <- G$relationships[i,]$rating
print(i)
print(j)
print(G$relationships[i,]$to)
print(G$relationships[i,]$rating)
}
}
}
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
user_rating <- G$relationships[i,]$rating
#G$nodes[j,]$user_rating <- G$relationships[i,]$rating
print(i)
print(j)
print(G$relationships[i,]$to)
print(G$relationships[i,]$rating)
}
}
}
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
user_rating <- G$relationships[i,]$rating
G$nodes[j,]$user_rating <- user_rating
print(i)
print(j)
print(G$relationships[i,]$to)
print(G$relationships[i,]$rating)
}
}
}
G$relationships[i]$to
G$relationships[i,]$to
G$nodes[j,]$user_rating <- 1
G$nodes[1,]$user_rating <- 1
G$nodes[1,0]$user_rating <- 1
G$nodes[1,1]$user_rating <- 1
G$nodes$user_rating<-""
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
user_rating <- G$relationships[i,]$rating
G$nodes[j,]$user_rating <- 1
print(i)
print(j)
print(G$relationships[i,]$to)
print(G$relationships[i,]$rating)
}
}
for (i in 1:nrow(G$relationships)){
for (j in 1:nrow(G$nodes)) {
if (G$nodes[j,]$id==G$relationships[i,]$to) {
user_rating <- G$relationships[i,]$rating
G$nodes[j,]$user_rating <- user_rating
print(i)
print(j)
print(G$relationships[i,]$to)
print(G$relationships[i,]$rating)
}
}
}
G$nodes
nrow(G$nodes)
head(G$nodes)
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
nrow(G$relationships)
nrow(G$nodes)
G$nodes$user_rating<-""
G$nodes
loginID <- 1
recLimit <- 10
query <- paste("MATCH a=(m:Movie)-[r:REVIEWED]-(p:Person {loginId: ",loginID,"}) return a order by r.timestamp desc limit ",recLimit, sep="")
print(query)
G <- query %>%
call_neo4j(con, type = "graph")
#head(G)
# We'll just unnest the properties
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties")
#head(G$nodes)
#length(G$nodes)
# Add new columns
G$nodes$node_type <- unlist(G$nodes$label)
G$nodes$label <- G$nodes$title
G$nodes$movie_title <- G$nodes$title
G$nodes[G$nodes$node_type=="Person",]$label = G$nodes[G$nodes$node_type=="Person",]$name
G$nodes$title <- G$nodes$node_type
# Turn the relationships :
G$relationships <- G$relationships %>%
unnest_relationships() %>%
select(from = startNode, to = endNode, label = type, rating = rating, review_date = review_date)
# Add rating column to nodes
nrow(G$relationships)
nrow(G$nodes)
G$nodes
head(G$nodes)
runApp()
runApp()
runApp()
